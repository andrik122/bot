import telebot
from telebot import types
import pymysql
import os
import json
# from price import get_data

from config import TOKEN, HOST, USER, PASSWORD, PORT, DATABASE

bot = telebot.TeleBot(TOKEN)

connection = pymysql.connect(
    host=HOST,
    user=USER,
    password=PASSWORD,
    port=PORT,
    database=DATABASE
)
cursor = connection.cursor()

# –ü—Ä–æ –∞–Ω–æ—Ç–∞—Ü—ñ—ó —Ä–æ–∑–ø–∏—Å–∞–≤ —É —Ñ—É–Ω–∫—Ü—ñ—ó start

phone = None
_id = None
_answer = None
current_index1 = 0
current_index2 = 0

# @bot.message_handler(commands=['update'])
# def update(message: str) -> None:
#     if message.chat.id != 163616716:
#         bot.send_message(message.chat.id, '–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø–æ–≤–Ω–æ–≤–∞–∂–µ–Ω—å –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏')
#     else:
#         get_data()
#         bot.send_message(message.chat.id, '–¶—ñ–Ω–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ')

def start_buttons() -> types.InlineKeyboardMarkup:
    """
    –¶–µ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –∫–Ω–æ–ø–∫–∏, —è–∫—â–æ —Ç—Ä–µ–±–∞ –¥–µ—Ç–∞–ª—å–Ω–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫, —â–æ, —è–∫ —ñ –∫—É–¥–∏ –ø—Ä–∞—Ü—é—î, —è –ø–æ—è—Å–Ω—é, –∞–±–æ –Ω–∞–ø–∏—à—É —Ç—É—Ç
    """
    markup = types.InlineKeyboardMarkup(row_width=2)
    women = types.InlineKeyboardButton('üôãüèª‚Äç‚ôÄÔ∏è –ñ—ñ–Ω–æ—á—ñ —Ç–æ–≤–∞—Ä–∏', callback_data = 'women')
    men = types.InlineKeyboardButton('üôãüèª‚Äç‚ôÇÔ∏è –ß–æ–ª–æ–≤—ñ—á—ñ —Ç–æ–≤–∞—Ä–∏', callback_data = 'men')
    help = types.InlineKeyboardButton('üõü –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É', callback_data = 'help')
    markup.add(women, men, help)
    return markup

def help_buttonts() -> types.InlineKeyboardMarkup:
    markup = types.InlineKeyboardMarkup(row_width=2)
    back = types.InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data = 'help_back')
    home = types.InlineKeyboardButton('‚è™ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data = 'help_home')
    markup.add(back, home)
    return markup

#—Ñ—É–Ω–∫—Ü—ñ—è, —â–æ –ø–æ–≤–µ—Ä–∞—î –∫–Ω–æ–ø–∫–∏ –∑ –∂—ñ–Ω–æ—á–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
def women_goods() -> types.InlineKeyboardMarkup:
    markup = types.InlineKeyboardMarkup(row_width=2)
    back = types.InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='back')
    home = types.InlineKeyboardButton('‚è™ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data='home')
    # bags = types.InlineKeyboardButton('–°—É–º–∫–∏', callback_data='bags')
    big = types.InlineKeyboardButton('–í–º—ñ—Å—Ç–∫—ñ —Å—É–º–∫–∏', callback_data = 'big')
    small = types.InlineKeyboardButton('–ö–æ–º–ø–∞–∫—Ç–Ω—ñ —Å—É–º–∫–∏', callback_data = 'small')
    backpacks = types.InlineKeyboardButton('–†—é–∫–∑–∞–∫–∏', callback_data='backpacks')
    accessories = types.InlineKeyboardButton('–ê–∫—Å–µ—Å—É–∞—Ä–∏', callback_data='accessories_women')
    help = types.InlineKeyboardButton('üõü –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É', callback_data='help')
    markup.add(back, home, big, small, backpacks, accessories)
    markup.add(help)
    return markup

    # return bot.edit_message_text(chat_id=cht, message_id=call.message.message_id, text='–í–∞–º–∏ –±—É–ª–æ –æ–±—Ä–∞–Ω–æ ¬´üôãüèª‚Äç‚ôÄÔ∏è–ñ—ñ–Ω–æ—á—ñ —Ç–æ–≤–∞—Ä–∏¬ª, —è–∫–∏–π —Ç–æ–≤–∞—Ä –í–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?\n–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:', reply_markup=markup)


#—Ñ—É–Ω–∫—Ü—ñ—è, —â–æ –ø–æ–≤–µ—Ä–∞—î –∫–Ω–æ–ø–∫–∏ –∑ —á–æ–ª–æ–≤—ñ—á–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
def men_goods() -> types.InlineKeyboardMarkup:
    markup = types.InlineKeyboardMarkup(row_width=2)
    back = types.InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data = 'back')
    home = types.InlineKeyboardButton('‚è™ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data = 'home')
    jacket = types.InlineKeyboardButton('–ö—É—Ä—Ç–∫–∏', callback_data = 'jacket')
    pants = types.InlineKeyboardButton('–®—Ç–∞–Ω–∏', callback_data = 'pants')
    accessories = types.InlineKeyboardButton('–ê–∫—Å–µ—Å—É–∞—Ä–∏', callback_data = 'accessories_men')
    help = types.InlineKeyboardButton('üõü –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É', callback_data = 'help')
    markup.add(back, home, jacket, pants)
    markup.add(accessories)
    markup.add(help)

    return markup

#—Ñ—É–Ω–∫—Ü—ñ—è, —â–æ –ø–æ–≤–µ—Ä–∞—î –∫–Ω–æ–ø–∫–∏ –∑ —Å—É–º–∫–∞–º–∏
# def bags() -> types.InlineKeyboardMarkup:
#     markup = types.InlineKeyboardMarkup(row_width=2)
#     back = types.InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data = 'back_bags')
#     home = types.InlineKeyboardButton('‚è™ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data = 'home')
#     big = types.InlineKeyboardButton('–í–º—ñ—Å—Ç–∫—ñ —Å—É–º–∫–∏', callback_data = 'big')
#     small = types.InlineKeyboardButton('–ö–æ–º–ø–∞–∫—Ç–Ω—ñ —Å—É–º–∫–∏', callback_data = 'small')
#     help = types.InlineKeyboardButton('üõü –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É', callback_data = 'help')
#     markup.add(back, home, big, small)
#     markup.add(help)
#     return markup

def help() -> types.InlineKeyboardMarkup:
    markup = types.InlineKeyboardMarkup(row_width=2)
    home = types.InlineKeyboardButton('‚è™ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data = 'home')
    q1 = types.InlineKeyboardButton('–Ø–∫ –∑–∞–º–æ–≤–∏—Ç–∏?', callback_data = 'q1')
    q2 = types.InlineKeyboardButton('–ö–æ–ª–∏ —Ç–∞ —è–∫ –æ–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞ —Ç–æ–≤–∞—Ä?', callback_data = 'q2')
    q3 = types.InlineKeyboardButton('–Ø–∫–∏–π —á–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä—É?', callback_data = 'q3')
    q4 = types.InlineKeyboardButton('–û–±–º—ñ–Ω/–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É', callback_data = 'q4')
    help_specialist = types.InlineKeyboardButton('–û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É —Ñ–∞—Ö—ñ–≤—Ü—è', callback_data = 'help_specialist')
    markup.add(home)
    markup.add(q1, q2, q3, q4)
    markup.add(help_specialist)
    return markup

def help_one_more() -> types.InlineKeyboardMarkup:
    markup = types.InlineKeyboardMarkup(row_width=2)
    home = types.InlineKeyboardButton('‚è™ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data = 'home2')
    help = types.InlineKeyboardButton('‚ùì –°–ø–∏—Ç–∞—Ç–∏—Å—å —â–µ', callback_data = 'help_specialist')
    markup.add(home, help)
    return markup

def q_handler(message):
    cht = message.chat.id

    if message.photo:
        photo_id = message.photo[-1].file_id
        caption = message.caption if message.caption else ''
        bot.send_photo(163616716, photo_id,
                    caption=f'id: <b>{cht}</b>\n'
                            f'name: {message.from_user.first_name} {message.from_user.last_name}\n'
                            f'username: <b>@{message.from_user.username}</b>\n'
                            f'phone: <b>{phone}</b>\n'
                            f'question: <b>{caption}</b>\n'
                            f'/answer', parse_mode='HTML')

    elif message.video:
        video_id = message.video.file_id
        caption = message.caption if message.caption else ''
        bot.send_video(163616716, video_id,
                    caption=f'id: <b>{cht}</b>\n'
                            f'name: {message.from_user.first_name} {message.from_user.last_name}\n'
                            f'username: <b>@{message.from_user.username}</b>\n'
                            f'phone: <b>{phone}</b>\n'
                            f'question: <b>{caption}</b>\n'
                            f'/answer', parse_mode='HTML')

    elif message.voice:
        voice_id = message.voice.file_id
        bot.send_voice(163616716, voice_id,
                       caption=f'id: <b>{cht}</b>\n'
                               f'name: {message.from_user.first_name} {message.from_user.last_name}\n'
                               f'username: <b>@{message.from_user.username}</b>\n'
                               f'phone: <b>{phone}</b>\n'
                               f'question: <b>{message.text}</b>\n'
                               f'/answer', parse_mode='HTML')
    else:
        bot.send_message(163616716, f'id: <b>{cht}</b>\n'
                                     f'name: {message.from_user.first_name} {message.from_user.last_name}\n'
                                     f'username: <b>@{message.from_user.username}</b>\n'
                                     f'phone: <b>{phone}</b>\n'
                                     f'question: <b>{message.text}</b>\n'
                                     f'/answer', parse_mode='HTML')

def answer_handler(message: str) -> None:
    cht = message.chat.id
    global _id

    _id = message.text

    msg = bot.send_message(cht, 'write answer/send photo/video:')
    bot.register_next_step_handler(msg, answer_send)

def answer_send(message: str) -> None:
    cht = message.chat.id
    global _answer

    if message.text:
        _answer = message.text
        try:
            bot.send_message(cht, f'–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É')
            bot.send_message(_id, f'‚úâÔ∏è –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤–∂–µ —Ç—É—Ç!\n–ó —Ä–∞–¥—ñ—Å—Ç—é –Ω–∞–¥–∞—î–º–æ –í–∞–º –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n<blockquote><b>{_answer}</b></blockquote>', parse_mode='HTML', reply_markup=help_one_more())
        except Exception as ex:
            bot.send_message(cht, f'–ü–æ–º–∏–ª–∫–∞\n{ex}')
            
    if message.photo:
        if message.caption:
            caption = message.caption
        else:
            caption = ''
            
        file_id = message.photo[-1].file_id
        try:
            bot.send_message(cht, f'–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É')
            bot.send_message(_id, f'‚úâÔ∏è –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤–∂–µ —Ç—É—Ç!\n–ó —Ä–∞–¥—ñ—Å—Ç—é –Ω–∞–¥–∞—î–º–æ –í–∞–º –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:')
            bot.send_photo(_id, file_id, caption=caption, reply_markup=help_one_more())
        except Exception as ex:
            bot.send_message(cht, f'–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ñ–æ—Ç–æ\n{ex}')
            
    if message.video:
        if message.caption:
            caption = message.caption
        else:
            caption = ''
            
        file_id = message.video.file_id
        try:
            bot.send_message(cht, f'–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É')
            bot.send_message(_id, f'‚úâÔ∏è –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤–∂–µ —Ç—É—Ç!\n–ó —Ä–∞–¥—ñ—Å—Ç—é –Ω–∞–¥–∞—î–º–æ –í–∞–º –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:')
            bot.send_video(_id, file_id, caption=caption, reply_markup=help_one_more())
        except Exception as ex:
            bot.send_message(cht, f'–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤—ñ–¥–µ–æ\n{ex}')



def discount1(message):
    cht = message.chat.id

    if message.text == 'women':  
        sex = 'women'
        items = ''
        with open('items.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
            for i in data['items'][sex]:
                items += f'{i}\n'
        msg = bot.send_message(cht, items)
        bot.register_next_step_handler(msg, discount2, sex)
    elif message.text == 'men': 
        sex = 'men'
        items = ''
        with open('items.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
            for i in data['items'][sex]:
                items += f'{i}\n'
        msg = bot.send_message(cht, items)
        bot.register_next_step_handler(msg, discount2, sex)
    else:
        msg = bot.send_message(cht, '—Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑')
        bot.register_next_step_handler(msg, discount1)

def discount2(message, sex):
    cht = message.chat.id
    group = message.text

    if message.text: 
        try: 
            items = ''
            with open('items.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
                for i in data['items'][sex][group]:
                    items += f'{i}\n'
            msg = bot.send_message(cht, items)
            bot.register_next_step_handler(msg, discount3, sex, group)
        except Exception as ex:
            msg = bot.send_message(cht, '—Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑')
            bot.register_next_step_handler(msg, discount2, sex)
    else:
        msg = bot.send_message(cht, '—Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑')
        bot.register_next_step_handler(msg, discount2, sex)

def discount3(message, sex, group):
    cht = message.chat.id
    item = message.text

    if message.text: 
        try: 
            items = ''
            with open('items.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
                for i in data['items'][sex][group][item]:
                    items += f'{i}\n'
            msg = bot.send_message(cht, '–ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–∫—Å—Ç? y/n')
            bot.register_next_step_handler(msg, discount4, sex, group, item)
        except Exception as ex:
            msg = bot.send_message(cht, '—Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑')
            bot.register_next_step_handler(msg, discount3, sex)
    else:
        msg = bot.send_message(cht, '—Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑')
        bot.register_next_step_handler(msg, discount3, sex)

def discount4(message, sex, group, item):
    cht = message.chat.id

    if message.text == 'y':
        msg = bot.send_message(cht, '–ù–∞–ø–∏—à–∏ –≤–ª–∞—Å–Ω–∏–π —Ç–µ–∫—Å—Ç')
        bot.register_next_step_handler(msg, own_text, sex, group, item)
    elif message.text == 'n':
        with open('items.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
            _data = data['items'][sex][group][item]

            image_path = _data['image_path']
            name_ = item
            old_price = _data['oldprice']
            new_price = _data['newprice']
            description = _data['description']
            url = _data['url']

            markup = types.InlineKeyboardMarkup(row_width=3)
            
            back = types.InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='back_btn_men')
            home = types.InlineKeyboardButton('‚è™ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data='home_btn_men')
            url = types.InlineKeyboardButton('üõí', url=f'{url}')
            markup.add(url)
            markup.add(back, home)
            
            cursor.execute("SELECT chat_id FROM users")
            ids = cursor.fetchall()
            for i in ids:
                bot.send_photo(i[0], open(os.path.join(image_path), 'rb'),
                                                caption=f'<b>{name_}</b>\n' +
                                                f'<s><i>{old_price} –≥—Ä–Ω</i></s> <b>{new_price} –≥—Ä–Ω</b>\n' +
                                                f'<blockquote>{description}</blockquote>',
                                                reply_markup=markup,
                                                parse_mode='HTML')

def own_text(message, sex, group, item):
    cht = message.chat.id

    with open('items.json', 'r', encoding='utf-8') as f:
        data = json.load(f)
        _data = data['items'][sex][group][item]

        image_path = _data['image_path']
        name_ = item
        old_price = _data['oldprice']
        new_price = _data['newprice']
        description = _data['description']
        url = _data['url']

        markup = types.InlineKeyboardMarkup(row_width=3)
            
        back = types.InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='back_btn_men')
        home = types.InlineKeyboardButton('‚è™ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data='home_btn_men')
        url = types.InlineKeyboardButton('üõí', url=f'{url}')
        markup.add(url)
        markup.add(back, home)
            
        cursor.execute("SELECT chat_id FROM users")
        ids = cursor.fetchall()
        for i in ids:
            bot.send_photo(i[0], open(os.path.join(image_path), 'rb'),
                                            caption = f'{message.text}\n\n' +
                                            f'<b>{name_}</b>\n' +
                                            f'<s><i>{old_price} –≥—Ä–Ω</i></s> <b>{new_price} –≥—Ä–Ω</b>\n' +
                                            f'<blockquote>{description}</blockquote>',
                                            reply_markup=markup,
                                            parse_mode='HTML')

# def send_discount(message, sex, sub_group):
#     cht = message.chat.id
#     name_ = message.text

#     try:
#         goods_items = open('items.json', 'r', encoding='utf-8')
#         data = json.load(goods_items)

#         description = data["items"][sex][sub_group][name_]["description"]
#         old_price = data["items"][sex][sub_group][name_]["oldprice"]
#         new_price = data["items"][sex][sub_group][name_]["newprice"]
#         image_path = data["items"][sex][sub_group][name_]["image_path"]
#         url = data["items"][sex][sub_group][name_]["url"]

#         markup = types.InlineKeyboardMarkup(row_width=3)
            
#         back = types.InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='back_btn_men')
#         home = types.InlineKeyboardButton('‚è™ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data='home_btn_men')
#         url = types.InlineKeyboardButton('üõí', url=f'{url}')
#         markup.add(url)
#         markup.add(back, home)
        
#         cursor.execute("SELECT chat_id FROM users")
#         data = cursor.fetchall()
#         print(data)
#         for i in data[0]:
#             bot.send_photo(i[0], open(os.path.join(image_path), 'rb'),
#                                         caption=f'‚ö†Ô∏è <b>{name_}</b>\n' +
#                                         f'<s><i>{old_price} –≥—Ä–Ω</i></s> <b>{new_price} –≥—Ä–Ω</b>\n\n' +
#                                         <blockquote>{description}</blockquote>',
#                                         reply_markup=markup,
#                                         parse_mode='HTML')
#     except Exception as ex:
#         bot.send_message(cht, '–ü–æ–º–∏–ª–∫–∞! –ü–æ–≥–∞–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –≥—Ä—É–ø–∞/–ø—ñ–¥–≥—Ä—É–ø–∞/—Ç–æ–≤–∞—Ä')


#------------------------------------------------------------------------------------------------------------------------------

# –¶—è callback —à—Ç—É–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –≤–∏–≤—ñ–¥ —Ç–æ–≤–∞—Ä—ñ–≤
@bot.callback_query_handler(func=lambda call: call.data in ['back_j', 'next_j'])
def jacket_show(call):
    global current_index1

    with open('items.json', 'r', encoding='utf-8') as f:
        with open('prices.json', 'r', encoding='utf-8') as f2:
            data = json.load(f)
            data2 = json.load(f2)

            category = 'men'
            item_type = 'jacket'

            item_list = list(data['items'][category][item_type].keys())

            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

            if call.data == 'back_j':
                current_index1 = (current_index1 - 1) % len(item_list)
            elif call.data == 'next_j':
                current_index1 = (current_index1 + 1) % len(item_list)

            t = item_list[current_index1]

            markup = types.InlineKeyboardMarkup(row_width=3)

            back = types.InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='back_btn_men')
            home = types.InlineKeyboardButton('‚è™ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data='home_btn_men')
            back_item = types.InlineKeyboardButton('‚óÄÔ∏è', callback_data='back_j')
            next_btn = types.InlineKeyboardButton('‚ñ∂Ô∏è', callback_data='next_j')
            url = types.InlineKeyboardButton('üõí', url=data['items'][category][item_type][t]['url'])
            markup.add(back_item, url, next_btn)
            markup.add(back, home)

            description = data2[t]['description']
            old_price = data2[t]['oldprice']
            new_price = data2[t]['newprice']
            image_path = data['items'][category][item_type][t]['image_path']

            caption = f'<b>{t}</b>\n'
            if old_price == new_price:
                caption += f'<blockquote>{description}</blockquote>\n{new_price}'
            else:
                caption += f'<s><i>{old_price} –≥—Ä–Ω</i></s> <b>{new_price} –≥—Ä–Ω</b>\n<blockquote>{description}</blockquote>'

            bot.send_photo(call.message.chat.id, open(os.path.join(image_path), 'rb'),
                           caption=caption,
                           reply_markup=markup,
                           parse_mode='HTML')


@bot.callback_query_handler(func=lambda call: call.data in ['bp', 'np'])
def pants_show(call):
    global current_index1

    with open('items.json', 'r', encoding='utf-8') as f:
        with open('prices.json', 'r', encoding='utf-8') as f2:
            data = json.load(f)
            data2 = json.load(f2)

            category = 'men'
            item_type = 'pants'

            item_list = list(data['items'][category][item_type].keys())

            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

            if call.data == 'bp':
                current_index1 = (current_index1 - 1) % len(item_list)
            elif call.data == 'bp':
                current_index1 = (current_index1 + 1) % len(item_list)

            t = item_list[current_index1]

            markup = types.InlineKeyboardMarkup(row_width=3)

            back = types.InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='back_btn_men')
            home = types.InlineKeyboardButton('‚è™ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data='home_btn_men')
            back_item = types.InlineKeyboardButton('‚óÄÔ∏è', callback_data='bp')
            next_btn = types.InlineKeyboardButton('‚ñ∂Ô∏è', callback_data='bp')
            url = types.InlineKeyboardButton('üõí', url=data['items'][category][item_type][t]['url'])
            markup.add(back_item, url, next_btn)
            markup.add(back, home)

            description = data2[t]['description']
            old_price = data2[t]['oldprice']
            new_price = data2[t]['newprice']
            image_path = data['items'][category][item_type][t]['image_path']

            caption = f'<b>{t}</b>\n'
            if old_price == new_price:
                caption += f'<blockquote>{description}</blockquote>\n{new_price}'
            else:
                caption += f'<s><i>{old_price} –≥—Ä–Ω</i></s> <b>{new_price} –≥—Ä–Ω</b>\n<blockquote>{description}</blockquote>'

            bot.send_photo(call.message.chat.id, open(os.path.join(image_path), 'rb'),
                           caption=caption,
                           reply_markup=markup,
                           parse_mode='HTML')
        
@bot.callback_query_handler(func=lambda call: call.data in ['bac', 'nac'])
def accessories_men(call):
    global current_index1

    with open('items.json', 'r', encoding='utf-8') as f:
        with open('prices.json', 'r', encoding='utf-8') as f2:
            data = json.load(f)
            data2 = json.load(f2)

            category = 'men'
            item_type = 'accessories_men'

            item_list = list(data['items'][category][item_type].keys())

            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

            if call.data == 'bac':
                current_index1 = (current_index1 - 1) % len(item_list)
            elif call.data == 'nac':
                current_index1 = (current_index1 + 1) % len(item_list)

            t = item_list[current_index1]

            markup = types.InlineKeyboardMarkup(row_width=3)

            back = types.InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='back_btn_men')
            home = types.InlineKeyboardButton('‚è™ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data='home_btn_men')
            back_item = types.InlineKeyboardButton('‚óÄÔ∏è', callback_data='bac')
            next_btn = types.InlineKeyboardButton('‚ñ∂Ô∏è', callback_data='nac')
            url = types.InlineKeyboardButton('üõí', url=data['items'][category][item_type][t]['url'])
            markup.add(back_item, url, next_btn)
            markup.add(back, home)

            description = data2[t]['description']
            old_price = data2[t]['oldprice']
            new_price = data2[t]['newprice']
            image_path = data['items'][category][item_type][t]['image_path']

            caption = f'<b>{t}</b>\n'
            if old_price == new_price:
                caption += f'<blockquote>{description}</blockquote>\n{new_price}'
            else:
                caption += f'<s><i>{old_price} –≥—Ä–Ω</i></s> <b>{new_price} –≥—Ä–Ω</b>\n<blockquote>{description}</blockquote>'

            bot.send_photo(call.message.chat.id, open(os.path.join(image_path), 'rb'),
                           caption=caption,
                           reply_markup=markup,
                           parse_mode='HTML')


@bot.callback_query_handler(func=lambda call: call.data in ['bbb', 'bbn'])
def big_bags(call):
    global current_index1

    with open('items.json', 'r', encoding='utf-8') as f:
        with open('prices.json', 'r', encoding='utf-8') as f2:
            data = json.load(f)
            data2 = json.load(f2)

            category = 'women'
            item_type = 'big.bags'

            item_list = list(data['items'][category][item_type].keys())

            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

            if call.data == 'bbb':
                current_index1 = (current_index1 - 1) % len(item_list)
            elif call.data == 'bbn':
                current_index1 = (current_index1 + 1) % len(item_list)

            t = item_list[current_index1]

            markup = types.InlineKeyboardMarkup(row_width=3)

            back = types.InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='back_btn_men')
            home = types.InlineKeyboardButton('‚è™ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data='home_btn_men')
            back_item = types.InlineKeyboardButton('‚óÄÔ∏è', callback_data='bbb')
            next_btn = types.InlineKeyboardButton('‚ñ∂Ô∏è', callback_data='bbn')
            url = types.InlineKeyboardButton('üõí', url=data['items'][category][item_type][t]['url'])
            markup.add(back_item, url, next_btn)
            markup.add(back, home)

            description = data2[t]['description']
            old_price = data2[t]['oldprice']
            new_price = data2[t]['newprice']
            image_path = data['items'][category][item_type][t]['image_path']

            caption = f'<b>{t}</b>\n'
            if old_price == new_price:
                caption += f'<blockquote>{description}</blockquote>\n{new_price}'
            else:
                caption += f'<s><i>{old_price} –≥—Ä–Ω</i></s> <b>{new_price} –≥—Ä–Ω</b>\n<blockquote>{description}</blockquote>'

            bot.send_photo(call.message.chat.id, open(os.path.join(image_path), 'rb'),
                           caption=caption,
                           reply_markup=markup,
                           parse_mode='HTML')


@bot.callback_query_handler(func=lambda call: call.data in ['sbb', 'sbn'])
def small_bags(call):
    global current_index1

    with open('items.json', 'r', encoding='utf-8') as f:
        with open('prices.json', 'r', encoding='utf-8') as f2:
            data = json.load(f)
            data2 = json.load(f2)

            category = 'women'
            item_type = 'small.bags'

            item_list = list(data['items'][category][item_type].keys())

            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

            if call.data == 'sbb':
                current_index1 = (current_index1 - 1) % len(item_list)
            elif call.data == 'sbn':
                current_index1 = (current_index1 + 1) % len(item_list)

            t = item_list[current_index1]

            markup = types.InlineKeyboardMarkup(row_width=3)

            back = types.InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='back_btn_men')
            home = types.InlineKeyboardButton('‚è™ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data='home_btn_men')
            back_item = types.InlineKeyboardButton('‚óÄÔ∏è', callback_data='sbb')
            next_btn = types.InlineKeyboardButton('‚ñ∂Ô∏è', callback_data='sbn')
            url = types.InlineKeyboardButton('üõí', url=data['items'][category][item_type][t]['url'])
            markup.add(back_item, url, next_btn)
            markup.add(back, home)

            description = data2[t]['description']
            old_price = data2[t]['oldprice']
            new_price = data2[t]['newprice']
            image_path = data['items'][category][item_type][t]['image_path']

            caption = f'<b>{t}</b>\n'
            if old_price == new_price:
                caption += f'<blockquote>{description}</blockquote>\n{new_price}'
            else:
                caption += f'<s><i>{old_price} –≥—Ä–Ω</i></s> <b>{new_price} –≥—Ä–Ω</b>\n<blockquote>{description}</blockquote>'

            bot.send_photo(call.message.chat.id, open(os.path.join(image_path), 'rb'),
                           caption=caption,
                           reply_markup=markup,
                           parse_mode='HTML')

@bot.callback_query_handler(func=lambda call: call.data in ['bb', 'bn'])
def backpack(call):
    global current_index1

    with open('items.json', 'r', encoding='utf-8') as f:
        with open('prices.json', 'r', encoding='utf-8') as f2:
            data = json.load(f)
            data2 = json.load(f2)

            category = 'women'
            item_type = 'backpack'

            item_list = list(data['items'][category][item_type].keys())

            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

            if call.data == 'bb':
                current_index1 = (current_index1 - 1) % len(item_list)
            elif call.data == 'bn':
                current_index1 = (current_index1 + 1) % len(item_list)

            t = item_list[current_index1]

            markup = types.InlineKeyboardMarkup(row_width=3)

            back = types.InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='back_btn_men')
            home = types.InlineKeyboardButton('‚è™ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data='home_btn_men')
            back_item = types.InlineKeyboardButton('‚óÄÔ∏è', callback_data='bb')
            next_btn = types.InlineKeyboardButton('‚ñ∂Ô∏è', callback_data='bn')
            url = types.InlineKeyboardButton('üõí', url=data['items'][category][item_type][t]['url'])
            markup.add(back_item, url, next_btn)
            markup.add(back, home)

            description = data2[t]['description']
            old_price = data2[t]['oldprice']
            new_price = data2[t]['newprice']
            image_path = data['items'][category][item_type][t]['image_path']

            caption = f'<b>{t}</b>\n'
            if old_price == new_price:
                caption += f'<blockquote>{description}</blockquote>\n{new_price}'
            else:
                caption += f'<s><i>{old_price} –≥—Ä–Ω</i></s> <b>{new_price} –≥—Ä–Ω</b>\n<blockquote>{description}</blockquote>'

            bot.send_photo(call.message.chat.id, open(os.path.join(image_path), 'rb'),
                           caption=caption,
                           reply_markup=markup,
                           parse_mode='HTML')


@bot.callback_query_handler(func=lambda call: call.data in ['awb', 'awn'])
def accessories_women(call):
    global current_index1

    with open('items.json', 'r', encoding='utf-8') as f:
        with open('prices.json', 'r', encoding='utf-8') as f2:
            data = json.load(f)
            data2 = json.load(f2)

            category = 'women'
            item_type = 'accessories_women'

            item_list = list(data['items'][category][item_type].keys())

            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

            if call.data == 'awb':
                current_index1 = (current_index1 - 1) % len(item_list)
            elif call.data == 'awn':
                current_index1 = (current_index1 + 1) % len(item_list)

            t = item_list[current_index1]

            markup = types.InlineKeyboardMarkup(row_width=3)

            back = types.InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='back_btn_men')
            home = types.InlineKeyboardButton('‚è™ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data='home_btn_men')
            back_item = types.InlineKeyboardButton('‚óÄÔ∏è', callback_data='awb')
            next_btn = types.InlineKeyboardButton('‚ñ∂Ô∏è', callback_data='awn')
            url = types.InlineKeyboardButton('üõí', url=data['items'][category][item_type][t]['url'])
            markup.add(back_item, url, next_btn)
            markup.add(back, home)

            description = data2[t]['description']
            old_price = data2[t]['oldprice']
            new_price = data2[t]['newprice']
            image_path = data['items'][category][item_type][t]['image_path']

            caption = f'<b>{t}</b>\n'
            if old_price == new_price:
                caption += f'<blockquote>{description}</blockquote>\n{new_price}'
            else:
                caption += f'<s><i>{old_price} –≥—Ä–Ω</i></s> <b>{new_price} –≥—Ä–Ω</b>\n<blockquote>{description}</blockquote>'

            bot.send_photo(call.message.chat.id, open(os.path.join(image_path), 'rb'),
                           caption=caption,
                           reply_markup=markup,
                           parse_mode='HTML')




#------------------------------------------------------------------------------------------------------------------------------

# –æ–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@bot.message_handler(commands=['start', 'goods_list'])
def start(message: str) -> None:
    """
    (message: str) - —Ç–æ –∞–Ω–æ—Ç–∞—Ü—ñ—è, –≤–∫–∞–∑—É—î–º–æ —Ç–∏–ø –¥–∞–Ω–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç—É message
    (-> None) - —Ç—É—Ç –º–∏ –≤–∫–∞—É—î–º–æ, —â–æ —Ñ—É–Ω–∫—Ü—ñ—è –Ω—ñ—á–æ–≥–æ –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞—î
    """
    cht = message.chat.id

    cursor.execute("CREATE TABLE IF NOT EXISTS users (id int AUTO_INCREMENT, chat_id varchar(10), PRIMARY KEY(id))")
    connection.commit()
    cursor.execute("SELECT * FROM users WHERE chat_id = %s", (cht,))
    existing_user = cursor.fetchone()

    # –Ø–∫—â–æ –∑–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Ç–æ –≤—Å—Ç–∞–≤–ª—è—î–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å
    if not existing_user:
        cursor.execute("INSERT INTO users (chat_id) VALUES (%s)", (cht,))
        connection.commit()

    bot.send_message(cht, '–í—ñ—Ç–∞—î–º–æ —É –º–∞–≥–∞–∑–∏–Ω—ñ 6bags\n–î–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –ø–æ –º–∞–≥–∞–∑–∏–Ω—É, –æ–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:', reply_markup=start_buttons())

@bot.message_handler(commands=['answer'])
def answer(message: str) -> None:
    cht = message.chat.id

    if cht != 163616716:
        bot.send_message(cht, '–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø–æ–≤–Ω–æ–≤–∞–∂–µ–Ω—å –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏')
    else:
        msg = bot.send_message(cht, 'id:')
        bot.register_next_step_handler(msg, answer_handler)

@bot.message_handler(commands=['help'])
def goods_list(message: str) -> None:
    cht = message.chat.id

    bot.send_message(cht, '–°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –ø–∏—Ç–∞–Ω–Ω—è–º–∏ –∞–±–æ –∑–∞–¥–∞–π—Ç–µ –≤–ª–∞—Å–Ω–µ –Ω–∞—à–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É', reply_markup=help())

@bot.message_handler(commands=['send_discount'])
def discount_(message: str) -> None:
    cht = message.chat.id

    if cht != 163616716:
        bot.send_message(cht, '–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø–æ–≤–Ω–æ–≤–∞–∂–µ–Ω—å –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏')
    else:
        items = ''
        with open('items.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
            for i in data['items']:
                items += f'{i}\n'
        msg = bot.send_message(cht, items)
        bot.register_next_step_handler(msg, discount1)


# –∑ —Ü—ñ—î—é —à—Ç—É–∫–æ—é —Å–∞–º –¥–æ –∫—ñ–Ω—Ü—è –Ω–µ —Ä–æ–∑—ñ–±—Ä–∞–≤—Å—è( –í–æ–Ω–æ —Ç—Ä–µ–±–∞ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —ñ–Ω–ª–∞–π–Ω–æ–≤–∏—Ö –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func = lambda call: True)
def callback(call):
    cht = call.message.chat.id

    # —Ç—É—Ç –º–∏ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, –Ω–∞ —è–∫—É –∫–Ω–æ–ø–∫—É —Ç–∏—Ü—å–Ω—É–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
    if call.message:
        if call.data == 'women':
            bot.edit_message_text(chat_id=cht, message_id=call.message.message_id, text='–í–∞–º–∏ –±—É–ª–æ –æ–±—Ä–∞–Ω–æ ¬´üôãüèª‚Äç‚ôÄÔ∏è–ñ—ñ–Ω–æ—á—ñ —Ç–æ–≤–∞—Ä–∏¬ª, —è–∫–∏–π —Ç–æ–≤–∞—Ä –í–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?\n–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:', reply_markup=women_goods())
        if call.data == 'men':
            bot.edit_message_text(chat_id=cht, message_id=call.message.message_id, text='–í–∞–º–∏ –±—É–ª–æ –æ–±—Ä–∞–Ω–æ ¬´üôãüèª‚Äç‚ôÇÔ∏è–ß–æ–ª–æ–≤—ñ—á—ñ —Ç–æ–≤–∞—Ä–∏¬ª, —è–∫–∏–π —Ç–æ–≤–∞—Ä –í–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?\n–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:', reply_markup=men_goods())
        elif call.data == 'big':
            big_bags(call)
        elif call.data == 'small':
            small_bags(call)
        elif call.data == 'backpacks':
            backpack(call)
        elif call.data == 'accessories_women':
            accessories_women(call)
        elif call.data == 'help':
            bot.edit_message_text(chat_id=cht, message_id=call.message.message_id, text='–°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –ø–∏—Ç–∞–Ω–Ω—è–º–∏ –∞–±–æ –∑–∞–¥–∞–π—Ç–µ –≤–ª–∞—Å–Ω–µ –Ω–∞—à–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É', reply_markup=help())
        elif call.data == 'jacket':
            jacket_show(call)
        elif call.data == 'pants':
            pants_show(call)
        elif call.data == 'accessories_men':
            accessories_men(call)
         

        elif call.data == 'back_btn_men':
            bot.send_message(cht, '–í–∞–º–∏ –±—É–ª–æ –æ–±—Ä–∞–Ω–æ ¬´üôãüèª‚Äç‚ôÇÔ∏è–ß–æ–ª–æ–≤—ñ—á—ñ —Ç–æ–≤–∞—Ä–∏¬ª, —è–∫–∏–π —Ç–æ–≤–∞—Ä –í–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?\n–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:', reply_markup=men_goods())
        elif call.data == 'home_btn_men':
            bot.send_message(cht, '–í—ñ—Ç–∞—î–º–æ —É –º–∞–≥–∞–∑–∏–Ω—ñ 6bags\n–î–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –ø–æ –º–∞–≥–∞–∑–∏–Ω—É, –æ–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:', reply_markup=start_buttons())
        elif call.data == 'back_btn_women':
            bot.send_message(cht, '–í–∞–º–∏ –±—É–ª–æ –æ–±—Ä–∞–Ω–æ ¬´üôãüèª‚Äç‚ôÄÔ∏è–ñ—ñ–Ω–æ—á—ñ —Ç–æ–≤–∞—Ä–∏¬ª, —è–∫–∏–π —Ç–æ–≤–∞—Ä –í–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?\n–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:', reply_markup=women_goods())

        # elif call.data == 'back_btn_women':
        #     bot.send_message(cht, '–°—É–º–∫–∏:', reply_markup=bags())
        #     women_goods(call=call)
        # elif call.data == 'back_btn_women':
        #     women_goods(call=call)
        elif call.data == 'home_btn_women':
            bot.send_message(cht, '–í—ñ—Ç–∞—î–º–æ —É –º–∞–≥–∞–∑–∏–Ω—ñ 6bags\n–î–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –ø–æ –º–∞–≥–∞–∑–∏–Ω—É, –æ–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:', reply_markup=start_buttons())




        elif call.data == 'q1':
            bot.edit_message_text(chat_id=cht, message_id=call.message.message_id,
                                  text="""1. –û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä, —è–∫–∏–π –±–∞–∂–∞—î—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏, —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´üõí¬ª –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –∫–∞—Ä—Ç–∫–∏ —Ç–æ–≤–∞—Ä—É
2. –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è - –ó–∞–ª–∏—à–∞—î—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –Ω–∞—à–æ–º—É —Å–∞–π—Ç—ñ
3. –î–∑–≤—ñ–Ω–æ–∫ - –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —É—Ç–æ—á–Ω—é—î –¥–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
4. –í—ñ–¥–ø—Ä–∞–≤–∫–∞ - –î–æ—Å—Ç–∞–≤–ª—è—î–º–æ —Ç–æ–≤–∞—Ä –ø—Ä–æ—Ç—è–≥–æ–º 1-3 –¥–Ω—ñ–≤
5. –û—Ç—Ä–∏–º–∞–Ω–Ω—è - –û–ø–ª–∞—á—É—î—Ç–µ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –Ω–∞ –ø–æ—à—Ç—ñ.""",
                                  reply_markup=help_buttonts())
        elif call.data == 'q2':
            bot.edit_message_text(chat_id=cht, message_id=call.message.message_id,
                                  text="""–û–ø–ª–∞—Ç–∞ –∑–∞ —Ç–æ–≤–∞—Ä –º–æ–∂–µ –±—É—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–æ—é:
–ù–∞–ª–æ–∂–µ–Ω–∏–π –ø–ª–∞—Ç—ñ–∂ - –ø—ñ—Å–ª—è –æ–≥–ª—è–¥—É —Ç–æ–≤–∞—Ä—É –Ω–∞ –ø–æ—à—Ç—ñ.
–ü–µ—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ - –æ–ø–ª–∞—á—É—î—Ç–µ –Ω–∞–ø–µ—Ä—ñ–¥. –í —Ä–∞–∑—ñ –≤—ñ–¥–º–æ–≤–∏, –º–∏ –ø–æ–≤–µ—Ä–Ω–µ–º–æ –í–∞–º –∫–æ—à—Ç–∏.""",
                                  reply_markup=help_buttonts())
        elif call.data == 'q3':
            bot.edit_message_text(chat_id=cht, message_id=call.message.message_id,
                                  text="""–¢–æ–≤–∞—Ä –¥–æ—Å—Ç–∞–≤–ª—è—î—Ç—å—Å—è –í–∞–º –ø—Ä–æ—Ç—è–≥–æ–º 1-3 –¥–Ω—ñ–≤ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –ø–æ—à—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤—ñ–∑–Ω–∏–∫–∞ —è–∫–æ–≥–æ –í–∏ –æ–±—Ä–∞–ª–∏ (–ù–æ–≤–∞ –ü–æ—à—Ç–∞ - —à–≤–∏–¥–∫–æ; –£–∫—Ä–ø–æ—à—Ç–∞ - –¥–µ—à–µ–≤–æ)""",
                                  reply_markup=help_buttonts())
        elif call.data == 'q4':
            bot.edit_message_text(chat_id=cht, message_id=call.message.message_id,
                                  text="""–ö–æ–º–ø–∞–Ω—ñ—è –∑–¥—ñ–π—Å–Ω—é—î –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —ñ –æ–±–º—ñ–Ω —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞–ª–µ–∂–Ω–æ—ó —è–∫–æ—Å—Ç—ñ –∑–≥—ñ–¥–Ω–æ –ó–∞–∫–æ–Ω—É <a href='https://zakon.rada.gov.ua/laws/show/1023-12#Text'>¬´–ü—Ä–æ –∑–∞—Ö–∏—Å—Ç –ø—Ä–∞–≤ —Å–ø–æ–∂–∏–≤–∞—á—ñ–≤¬ª</a>.

–°—Ç—Ä–æ–∫–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —ñ –æ–±–º—ñ–Ω—É
–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —Ç–∞ –æ–±–º—ñ–Ω —Ç–æ–≤–∞—Ä—ñ–≤ –º–æ–∂–ª–∏–≤–∏–π –ø—Ä–æ—Ç—è–≥–æ–º 14 –¥–Ω—ñ–≤ –ø—ñ—Å–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –ø–æ–∫—É–ø—Ü–µ–º.

–ó–≤–æ—Ä–æ—Ç–Ω—è –¥–æ—Å—Ç–∞–≤–∫–∞ —Ç–æ–≤–∞—Ä—ñ–≤ –∑–¥—ñ–π—Å–Ω—é—î—Ç—å—Å—è –∑–∞ –¥–æ–º–æ–≤–ª–µ–Ω—ñ—Å—Ç—é.

–£–º–æ–≤–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–ª—è —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞–ª–µ–∂–Ω–æ—ó —è–∫–æ—Å—Ç—ñ

–¢–æ–≤–∞—Ä–∏ –º–∞–≥–∞–∑–∏–Ω—É 6bags –ø—ñ–¥–ª—è–≥–∞—é—Ç—å –æ–±–º—ñ–Ω—É —É —Ä–∞–∑—ñ –Ω–µ–∑–∞–¥–æ–≤–æ–ª–µ–Ω–æ—Å—Ç—ñ –∫–ª—ñ—î–Ω—Ç–∞ –ø–æ–∫—É–ø–∫–æ—é. 
–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –æ–±–º—ñ–Ω—É –≤–∏ –ø–æ–≤–∏–Ω–Ω—ñ –ø—Ä–æ—Ç—è–≥–æ–º 14 –¥–Ω—ñ–≤ –ø—ñ—Å–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ –º–∞–≥–∞–∑–∏–Ω–æ–º –∑–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º 380501419080, –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ —Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç–æ–≤–∞—Ä –¥–æ –º–∞–≥–∞–∑–∏–Ω—É. 
–û–±–º—ñ–Ω —Ç–æ–≤–∞—Ä—É –∑–¥—ñ–π—Å–Ω—é—î—Ç—å—Å—è –ù–æ–≤–æ—é –ø–æ—à—Ç–æ—é –∞–±–æ –£–∫—Ä–ø–æ—à—Ç–æ—é –∑ –æ–ø–ª–∞—Ç–æ—é –ø–æ—à—Ç–æ–≤–∏—Ö –ø–æ—Å–ª—É–≥ –∑–∞ —Ä–∞—Ö—É–Ω–æ–∫ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞. –ù–æ–≤–∏–π —Ç–æ–≤–∞—Ä –∑ –æ–±–º—ñ–Ω—É –Ω–∞–¥—Å–∏–ª–∞—î—Ç—å—Å—è –∫–ª—ñ—î–Ω—Ç—É –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –¥–Ω—è –ø—ñ—Å–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –º–∞–≥–∞–∑–∏–Ω–æ–º —á–µ—Ä–µ–∑ –ø–æ—à—Ç—É. 

–¢–æ–≤–∞—Ä–∏ –º–∞–≥–∞–∑–∏–Ω—É 6bags –ø—ñ–¥–ª—è–≥–∞—é—Ç—å –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—é, —É —Ä–∞–∑—ñ –Ω–µ–∑–∞–¥–æ–≤–æ–ª–µ–Ω–æ—Å—Ç—ñ –∫–ª—ñ—î–Ω—Ç–∞ –ø–æ–∫—É–ø–∫–æ—é. 
–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤–∏ –ø–æ–≤–∏–Ω–Ω—ñ –ø—Ä–æ—Ç—è–≥–æ–º 14 –¥–Ω—ñ–≤ –ø—ñ—Å–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ –º–∞–≥–∞–∑–∏–Ω–æ–º –∑–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º 380501419080, –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ —Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç–æ–≤–∞—Ä –¥–æ –º–∞–≥–∞–∑–∏–Ω—É. 
–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –∑–¥—ñ–π—Å–Ω—é—î—Ç—å—Å—è –ù–æ–≤–æ—é –ø–æ—à—Ç–æ—é –∞–±–æ –£–∫—Ä–ø–æ—à—Ç–æ—é –∑ –æ–ø–ª–∞—Ç–æ—é –ø–æ—à—Ç–æ–≤–∏—Ö –ø–æ—Å–ª—É–≥ –∑–∞ —Ä–∞—Ö—É–Ω–æ–∫ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞. –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≥—Ä–æ—à–µ–π –∑–¥—ñ–π—Å–Ω—é—î—Ç—å—Å—è –Ω–∞ –∫–∞—Ä—Ç–∫—É –∫–ª—ñ—î–Ω—Ç–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –¥–Ω—è –ø—ñ—Å–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –º–∞–≥–∞–∑–∏–Ω–æ–º —á–µ—Ä–µ–∑ –ø–æ—à—Ç—É.

–í—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –∑–∞–∫–æ–Ω—É <a href='https://zakon.rada.gov.ua/laws/show/1023-12#Text'>¬´–ü—Ä–æ –∑–∞—Ö–∏—Å—Ç –ø—Ä–∞–≤ —Å–ø–æ–∂–∏–≤–∞—á—ñ–≤¬ª</a>, –∫–æ–º–ø–∞–Ω—ñ—è –º–æ–∂–µ –≤—ñ–¥–º–æ–≤–∏—Ç–∏ —Å–ø–æ–∂–∏–≤–∞—á–µ–≤—ñ –≤ –æ–±–º—ñ–Ω—ñ —Ç–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞–ª–µ–∂–Ω–æ—ó —è–∫–æ—Å—Ç—ñ, —è–∫—â–æ –≤–æ–Ω–∏ –≤—ñ–¥–Ω–æ—Å—è—Ç—å—Å—è –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π, –∑–∞–∑–Ω–∞—á–µ–Ω–∏—Ö —É —á–∏–Ω–Ω–æ–º—É <a href='https://zakon.rada.gov.ua/laws/show/172-94-%D0%BF#Text'>–ü–µ—Ä–µ–ª—ñ–∫—É –Ω–µ–ø—Ä–æ–¥–æ–≤–æ–ª—å—á–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞–ª–µ–∂–Ω–æ—ó —è–∫–æ—Å—Ç—ñ, —â–æ –Ω–µ –ø—ñ–¥–ª—è–≥–∞—é—Ç—å –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—é —Ç–∞ –æ–±–º—ñ–Ω—É</a>.""",
                                  reply_markup=help_buttonts(),
                                  parse_mode='HTML')
        elif call.data == 'help_specialist':
            global phone

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            phone = types.KeyboardButton('–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç', request_contact=True)
            markup.add(phone)
            bot.send_message(cht, '–ù–∞–¥—ñ—à–ª—ñ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç', reply_markup=markup)


        # –¶—ñ –±–ª–æ–∫–∏ elif –≤—ñ–¥–æ–∫—Ä–µ–º–ª–µ–Ω—ñ, –±–æ —Ç—É—Ç —Ü—ñ–ª–∞ —Å–∏—Å—Ç–µ–º–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω—å –Ω–∞–∑–∞–¥ :)
        elif call.data == 'back':
            bot.edit_message_text(chat_id=cht, message_id=call.message.message_id, text='–í—ñ—Ç–∞—î–º–æ —É –º–∞–≥–∞–∑–∏–Ω—ñ 6bags\n–î–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –ø–æ –º–∞–≥–∞–∑–∏–Ω—É, –æ–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:', reply_markup=start_buttons())
        elif call.data == 'back_bags':
            bot.edit_message_text(chat_id=cht, message_id=call.message.message_id, text='–í–∞–º–∏ –±—É–ª–æ –æ–±—Ä–∞–Ω–æ ¬´üôãüèª‚Äç‚ôÄÔ∏è–ñ—ñ–Ω–æ—á—ñ —Ç–æ–≤–∞—Ä–∏¬ª, —è–∫–∏–π —Ç–æ–≤–∞—Ä –í–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?\n–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:', reply_markup=women_goods())
        elif call.data == 'home':
            bot.edit_message_text(chat_id=cht, message_id=call.message.message_id, text='–í—ñ—Ç–∞—î–º–æ —É –º–∞–≥–∞–∑–∏–Ω—ñ 6bags\n–î–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –ø–æ –º–∞–≥–∞–∑–∏–Ω—É, –æ–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:', reply_markup=start_buttons())
        elif call.data == 'home2':
            bot.send_message(cht, '–í—ñ—Ç–∞—î–º–æ —É –º–∞–≥–∞–∑–∏–Ω—ñ 6bags\n–î–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –ø–æ –º–∞–≥–∞–∑–∏–Ω—É, –æ–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:', reply_markup=start_buttons())

        elif call.data == 'help_back':
            bot.edit_message_text(chat_id=cht, message_id=call.message.message_id, text='–°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –ø–∏—Ç–∞–Ω–Ω—è–º–∏ –∞–±–æ –∑–∞–¥–∞–π—Ç–µ –≤–ª–∞—Å–Ω–µ –Ω–∞—à–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É', reply_markup=help())
        elif call.data == 'help_home':
            bot.edit_message_text(chat_id=cht, message_id=call.message.message_id, text='–í—ñ—Ç–∞—î–º–æ —É –º–∞–≥–∞–∑–∏–Ω—ñ 6bags\n–î–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –ø–æ –º–∞–≥–∞–∑–∏–Ω—É, –æ–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:', reply_markup=start_buttons())



# –æ–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç—É
@bot.message_handler(content_types=['contact'])
def text(message):
    cht = message.chat.id
    global phone

    if message.contact:
        phone = message.contact.phone_number

        keyboard = types.ReplyKeyboardRemove()
        msg = bot.send_message(cht, '–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–∏—Ç–∞–Ω–Ω—è', reply_markup=keyboard)

        bot.register_next_step_handler(msg, q_handler)

bot.polling()