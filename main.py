import telebot
from telebot import types
import os
import json
from config import TOKEN

bot = telebot.TeleBot(TOKEN)

# –ü—Ä–æ –∞–Ω–æ—Ç–∞—Ü—ñ—ó —Ä–æ–∑–ø–∏—Å–∞–≤ —É —Ñ—É–Ω–∫—Ü—ñ—ó start

phone = None
_id = None
_answer = None
current_index1 = 0
current_index2 = 0

def start_buttons() -> types.InlineKeyboardMarkup:
    """
    –¶–µ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –∫–Ω–æ–ø–∫–∏, —è–∫—â–æ —Ç—Ä–µ–±–∞ –¥–µ—Ç–∞–ª—å–Ω–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫, —â–æ, —è–∫ —ñ –∫—É–¥–∏ –ø—Ä–∞—Ü—é—î, —è –ø–æ—è—Å–Ω—é, –∞–±–æ –Ω–∞–ø–∏—à—É —Ç—É—Ç
    """
    markup = types.InlineKeyboardMarkup(row_width=2)
    women = types.InlineKeyboardButton('üôã‚Äç‚ôÄÔ∏è –ñ—ñ–Ω–æ—á—ñ —Ç–æ–≤–∞—Ä–∏', callback_data = 'women')
    men = types.InlineKeyboardButton('üôã‚Äç‚ôÇÔ∏è –ß–æ–ª–æ–≤—ñ—á—ñ —Ç–æ–≤–∞—Ä–∏', callback_data = 'men')
    help = types.InlineKeyboardButton('üõü –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É', callback_data = 'help')
    markup.add(women, men, help)
    return markup

#—Ñ—É–Ω–∫—Ü—ñ—è, —â–æ –ø–æ–≤–µ—Ä–∞—î –∫–Ω–æ–ø–∫–∏ –∑ –∂—ñ–Ω–æ—á–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
def women_goods(call) -> types.InlineKeyboardMarkup:
    cht= call.message.chat.id

    markup = types.InlineKeyboardMarkup(row_width=2)
    back = types.InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data = 'back')
    home = types.InlineKeyboardButton('‚è™ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data = 'home')
    bags = types.InlineKeyboardButton('–°—É–º–∫–∏', callback_data = 'bags')
    backpacks = types.InlineKeyboardButton('–†—é–∫–∑–∞–∫–∏', callback_data = 'backpacks')
    accessories = types.InlineKeyboardButton('–ê–∫—Å–µ—Å—É–∞—Ä–∏', callback_data = 'accessories_women')
    help = types.InlineKeyboardButton('üõü –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É', callback_data = 'help')
    markup.add(back, home, bags, backpacks)
    markup.add(accessories)
    markup.add(help)

    return bot.edit_message_text(chat_id=cht, message_id=call.message.message_id, text='–í–∏ –æ–±—Ä–∞–ª–∏ –∂—ñ–Ω–æ—á—ñ —Ç–æ–≤–∞—Ä–∏', reply_markup=markup)

#—Ñ—É–Ω–∫—Ü—ñ—è, —â–æ –ø–æ–≤–µ—Ä–∞—î –∫–Ω–æ–ø–∫–∏ –∑ —á–æ–ª–æ–≤—ñ—á–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
def men_goods() -> types.InlineKeyboardMarkup:
    markup = types.InlineKeyboardMarkup(row_width=2)
    back = types.InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data = 'back')
    home = types.InlineKeyboardButton('‚è™ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data = 'home')
    jacket = types.InlineKeyboardButton('–ö—É—Ä—Ç–∫–∏', callback_data = 'jacket')
    pants = types.InlineKeyboardButton('–®—Ç–∞–Ω–∏', callback_data = 'pants')
    accessories = types.InlineKeyboardButton('–ê–∫—Å–µ—Å—É–∞—Ä–∏', callback_data = 'accessories_men')
    help = types.InlineKeyboardButton('üõü –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É', callback_data = 'help')
    markup.add(back, home, jacket, pants)
    markup.add(accessories)
    markup.add(help)

    return markup

#—Ñ—É–Ω–∫—Ü—ñ—è, —â–æ –ø–æ–≤–µ—Ä–∞—î –∫–Ω–æ–ø–∫–∏ –∑ —Å—É–º–∫–∞–º–∏
def bags() -> types.InlineKeyboardMarkup:
    markup = types.InlineKeyboardMarkup(row_width=2)
    back = types.InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data = 'back_bags')
    home = types.InlineKeyboardButton('‚è™ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data = 'home')
    big = types.InlineKeyboardButton('–í–º—ñ—Å—Ç–∫—ñ —Å—É–º–∫–∏', callback_data = 'big')
    small = types.InlineKeyboardButton('–ö–æ–º–ø–∞–∫—Ç–Ω—ñ —Å—É–º–∫–∏', callback_data = 'small')
    help = types.InlineKeyboardButton('üõü –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É', callback_data = 'help')
    markup.add(back, home, big, small)
    markup.add(help)
    return markup

def help() -> types.InlineKeyboardMarkup:
    markup = types.InlineKeyboardMarkup(row_width=2)
    home = types.InlineKeyboardButton('‚è™ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data = 'home')
    q1 = types.InlineKeyboardButton('–ü–∏—Ç–∞–Ω–Ω—è 1', callback_data = 'q1')
    q2 = types.InlineKeyboardButton('–ü–∏—Ç–∞–Ω–Ω—è 2', callback_data = 'q2')
    q3 = types.InlineKeyboardButton('–ü–∏—Ç–∞–Ω–Ω—è 3', callback_data = 'q3')
    q4 = types.InlineKeyboardButton('–ü–∏—Ç–∞–Ω–Ω—è 4', callback_data = 'q4')
    help_specialist = types.InlineKeyboardButton('–û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É —Ñ–∞—Ö—ñ–≤—Ü—è', callback_data = 'help_specialist')
    markup.add(home)
    markup.add(q1, q2, q3, q4)
    markup.add(help_specialist)
    return markup

def help_one_more() -> types.InlineKeyboardMarkup:
    markup = types.InlineKeyboardMarkup(row_width=2)
    home = types.InlineKeyboardButton('‚è™ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data = 'home')
    help = types.InlineKeyboardButton('‚ùì –°–ø–∏—Ç–∞—Ç–∏—Å—å —â–µ', callback_data = 'help_specialist')
    markup.add(home, help)
    return markup

def q_handler(message: str) -> None:
    cht = message.chat.id

    bot.send_message(cht, '–ú–µ–Ω–µ–¥–∂–µ—Ä –≤–∂–µ –ø–æ—Å–ø—ñ—à–∞—î –Ω–∞–¥–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å ‚åõÔ∏è\n–ê –ø–æ–∫–∏, –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–∞—à—ñ —Ç–æ–≤–∞—Ä–∏ ‚ò∫Ô∏è', reply_markup=start_buttons())
    bot.send_message(1001173176, f'id: <b>{cht}</b>\nusername: <b>@{message.from_user.username}</b>\nphone: <b>{phone}</b>\nquestion: <b>{message.text}</b>', parse_mode='HTML')

def answer_handler(message: str) -> None:
    cht = message.chat.id
    global _id

    _id = message.text

    msg = bot.send_message(cht, 'write answer:')
    bot.register_next_step_handler(msg, answer_send)

def answer_send(message: str) -> None:
    cht = message.chat.id
    global _answer

    _answer = message.text

    try:
        bot.send_message(cht, f'–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É')
        bot.send_message(_id, f'–í–∞–º –Ω–∞–¥—ñ—à–ª–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n<b><i>{_answer}</i></b>', parse_mode='HTML', reply_markup=help_one_more())
        # bot.send_message(_id, f'–©–æ–± –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è —â–µ —Ä–∞–∑, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ—é', reply_markup=help_one_more())
    except Exception as ex:
        bot.send_message(cht, f'–ü–æ–º–∏–ª–∫–∞\n{ex}')

def send_discount(message: str) -> None:
    name_ = message.text

    goods_items = open('items.json', 'r', encoding='utf-8')
    data = json.load(goods_items)

    description1 = data["items"]['men']["jacket"][name_]["description1"]
    description2 = data["items"]['men']["jacket"][name_]["description2"]
    description3 = data["items"]['men']["jacket"][name_]["description3"]
    description4 = data["items"]['men']["jacket"][name_]["description4"]
    description5 = data["items"]['men']["jacket"][name_]["description5"]
    old_price = data["items"]['men']["jacket"][name_]["oldprice"]
    new_price = data["items"]['men']["jacket"][name_]["newprice"]
    image_path = data["items"]['men']["jacket"][name_]["image_path"]
    url = data["items"]['men']["jacket"][name_]["url"]

    markup = types.InlineKeyboardMarkup(row_width=3)
        
    back = types.InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data = 'back_btn_men')
    home = types.InlineKeyboardButton('‚è™ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data = 'home_btn_men')
    url = types.InlineKeyboardButton('üõí', url=f'{url}')
    markup.add(url)
    markup.add(back, home)
 
    with open('users.json', 'r', encoding='utf-8') as f:
        data = json.load(f)
        for i in data['chat_ids']:
            bot.send_photo(i, open(os.path.join(image_path), 'rb'),
                                    caption=f'‚ö†Ô∏è <b>{name_}</b>\n' +
                                    f'<s><i>{old_price}</i></s> <b>{new_price}</b>\n\n' +
                                    f'{description1}\n{description2}\n{description3}\n{description4}\n{description5}',
                                    reply_markup=markup,
                                    parse_mode='HTML')

#------------------------------------------------------------------------------------------------------------------------------

# –¶—è callback —à—Ç—É–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –≤–∏–≤—ñ–¥ —Ç–æ–≤–∞—Ä—ñ–≤
@bot.callback_query_handler(func=lambda call: call.data in ['back_j', 'next_j'])
def jacket_show(call):
    global current_index1

    with open('items.json', 'r', encoding='utf-8') as f:
        data = json.load(f)
        item_list = list(data['items']['men']['jacket'].keys())

        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

        if call.data == 'back_j':
            current_index1 = (current_index1 - 1) % len(item_list)
        elif call.data == 'next_j':
            current_index1 = (current_index1 + 1) % len(item_list)

        t = item_list[current_index1]

        markup = types.InlineKeyboardMarkup(row_width=3)

        back = types.InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='back_btn_men')
        home = types.InlineKeyboardButton('‚è™ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data='home_btn_men')
        back_item = types.InlineKeyboardButton('‚óÄÔ∏è', callback_data='back_j')
        next_btn = types.InlineKeyboardButton('‚ñ∂Ô∏è', callback_data='next_j')
        url = types.InlineKeyboardButton('üõí', url=data['items']['men']['jacket'][t]['url'])
        markup.add(back_item, url, next_btn)
        markup.add(back, home)

        description = '\n'.join(data["items"]['men']["jacket"][t][f"description{i}"] for i in range(1, 6))
        old_price = data["items"]['men']["jacket"][t]["oldprice"]
        new_price = data["items"]['men']["jacket"][t]["newprice"]
        image_path = data["items"]['men']["jacket"][t]["image_path"]

        caption = f'<b>{t}</b>\n'
        if old_price == new_price:
            caption += f'{description}\n{new_price}'
        else:
            caption += f'<s><i>‚Ç¥{old_price}</i></s> <b>‚Ç¥{new_price}</b>\n\n{description}'

        bot.send_photo(call.message.chat.id, open(os.path.join(image_path), 'rb'),
                       caption=caption,
                       reply_markup=markup,
                       parse_mode='HTML')

@bot.callback_query_handler(func=lambda call: call.data in ['bp', 'np'])
def pants_show(call):
    global current_index1

    with open('items.json', 'r', encoding='utf-8') as f:
        data = json.load(f)
        item_list = list(data['items']['men']['pants'].keys())

        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

        if call.data == 'bp':
            current_index1 = (current_index1 - 1) % len(item_list)
        elif call.data == 'np':
            current_index1 = (current_index1 + 1) % len(item_list)

        # –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π, –ø–µ—Ä—à –Ω—ñ–∂ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç –∑–∞ —ñ–Ω–¥–µ–∫—Å–æ–º
        if item_list:
            t = item_list[current_index1]

            markup = types.InlineKeyboardMarkup(row_width=3)

            back = types.InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='back_btn_men')
            home = types.InlineKeyboardButton('‚è™ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data='home_btn_men')
            back_item = types.InlineKeyboardButton('‚óÄÔ∏è', callback_data='bp')
            next_btn = types.InlineKeyboardButton('‚ñ∂Ô∏è', callback_data='np')
            url = types.InlineKeyboardButton('üõí', url=data['items']['men']['pants'][t]['url'])
            markup.add(back_item, url, next_btn)
            markup.add(back, home)

            description = '\n'.join(data["items"]['men']["pants"][t][f"description{i}"] for i in range(1, 6))
            old_price = data["items"]['men']["pants"][t]["oldprice"]
            new_price = data["items"]['men']["pants"][t]["newprice"]
            image_path = data["items"]['men']["pants"][t]["image_path"]

            caption = f'<b>{t}</b>\n'
            if old_price == new_price:
                caption += f'{description}\n{new_price}'
            else:
                caption += f'<s><i>‚Ç¥{old_price}</i></s> <b>‚Ç¥{new_price}</b>\n\n{description}'

            bot.send_photo(call.message.chat.id, open(os.path.join(image_path), 'rb'),
                           caption=caption,
                           reply_markup=markup,
                           parse_mode='HTML')
        else:
            bot.send_message(call.message.chat.id, "–°–ø–∏—Å–æ–∫ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π")

    f.close()
        
@bot.callback_query_handler(func=lambda call: call.data in ['bac', 'nac'])
def accessories_men(call):
    global current_index1

    with open('items.json', 'r', encoding='utf-8') as f:
        data = json.load(f)
        item_list = list(data['items']['men']['accessories_men'].keys())

        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

        if call.data == 'bac':
            current_index1 = (current_index1 - 1) % len(item_list)
        elif call.data == 'nac':
            current_index1 = (current_index1 + 1) % len(item_list)

        t = item_list[current_index1]

        markup = types.InlineKeyboardMarkup(row_width=3)
        
        back = types.InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='back_btn_men')
        home = types.InlineKeyboardButton('‚è™ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data='home_btn_men')
        back_item = types.InlineKeyboardButton('‚óÄÔ∏è', callback_data='bac')
        next_btn = types.InlineKeyboardButton('‚ñ∂Ô∏è', callback_data='nac')
        url = types.InlineKeyboardButton('üõí', url=data['items']['men']['accessories_men'][t]['url'])
        markup.add(back_item, url, next_btn)
        markup.add(back, home)

        description1 = data["items"]['men']["accessories_men"][t]["description1"]
        old_price = data["items"]['men']["accessories_men"][t]["oldprice"]
        new_price = data["items"]['men']["accessories_men"][t]["newprice"]
        image_path = data["items"]['men']["accessories_men"][t]["image_path"]

        if old_price == new_price:    
            bot.send_photo(call.message.chat.id, open(os.path.join(image_path), 'rb'),
                           caption=f'<b>{t}</b>\n{description1}{new_price}',
                           reply_markup=markup,
                           parse_mode='HTML')
        else:
            bot.send_photo(call.message.chat.id, open(os.path.join(image_path), 'rb'),
                           caption=f'<b>{t}</b>\n<s><i>‚Ç¥{old_price}</i></s> <b>‚Ç¥{new_price}</b>\n\n{description1}',
                           reply_markup=markup,
                           parse_mode='HTML')
    f.close()


@bot.callback_query_handler(func=lambda call: call.data in ['bbb', 'bbn'])
def big_bags(call):
    global current_index1

    with open('items.json', 'r', encoding='utf-8') as f:
        data = json.load(f)
        item_list = list(data['items']['women']['bags']['big.bags'].keys())

        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

        if call.data == 'bbb':
            current_index1 = (current_index1 - 1) % len(item_list)
        elif call.data == 'bbn':
            current_index1 = (current_index1 + 1) % len(item_list)

        t = item_list[current_index1]

        markup = types.InlineKeyboardMarkup(row_width=3)
        
        back = types.InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='back_btn_women')
        home = types.InlineKeyboardButton('‚è™ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data='home_btn_women')
        back_item = types.InlineKeyboardButton('‚óÄÔ∏è', callback_data='bbb')
        next_btn = types.InlineKeyboardButton('‚ñ∂Ô∏è', callback_data='bbn')
        url = types.InlineKeyboardButton('üõí', url=data['items']['women']['bags']['big.bags'][t]['url'])
        markup.add(back_item, url, next_btn)
        markup.add(back, home)

        description1 = data["items"]['women']['bags']["big.bags"][t]["description1"]
        description2 = data["items"]['women']['bags']["big.bags"][t]["description2"]
        description3 = data["items"]['women']['bags']["big.bags"][t]["description3"]
        description4 = data["items"]['women']['bags']["big.bags"][t]["description4"]
        description5 = data["items"]['women']['bags']["big.bags"][t]["description5"]
        old_price = data["items"]['women']['bags']["big.bags"][t]["oldprice"]
        new_price = data["items"]['women']['bags']["big.bags"][t]["newprice"]
        image_path = data["items"]['women']['bags']["big.bags"][t]["image_path"]

        if old_price == new_price:    
            bot.send_photo(call.message.chat.id, open(os.path.join(image_path), 'rb'),
                           caption=f'<b>{t}</b>\n<b>‚Ç¥{new_price}</b>\n\n{description1}\n{description2}\n{description3}\n{description4}\n{description5}',
                           reply_markup=markup,
                           parse_mode='HTML')
        else:
            bot.send_photo(call.message.chat.id, open(os.path.join(image_path), 'rb'),
                           caption=f'<b>{t}</b>\n<s><i>‚Ç¥{old_price}</i></s> <b>‚Ç¥{new_price}</b>\n\n{description1}\n{description2}\n{description3}\n{description4}\n{description5}',
                           reply_markup=markup,
                           parse_mode='HTML')
    f.close()


@bot.callback_query_handler(func=lambda call: call.data in ['sbb', 'sbn'])
def small_bags(call):
    global current_index1

    with open('items.json', 'r', encoding='utf-8') as f:
        data = json.load(f)
        item_list = list(data['items']['women']['bags']['small.bags'].keys())

        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

        if call.data == 'sbb':
            current_index1 = (current_index1 - 1) % len(item_list)
        elif call.data == 'sbn':
            current_index1 = (current_index1 + 1) % len(item_list)

        t = item_list[current_index1]

        markup = types.InlineKeyboardMarkup(row_width=3)
        
        back = types.InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='back_btn_women')
        home = types.InlineKeyboardButton('‚è™ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data='home_btn_women')
        back_item = types.InlineKeyboardButton('‚óÄÔ∏è', callback_data='sbb')
        next_btn = types.InlineKeyboardButton('‚ñ∂Ô∏è', callback_data='sbn')
        url = types.InlineKeyboardButton('üõí', url=data['items']['women']['bags']['small.bags'][t]['url'])
        markup.add(back_item, url, next_btn)
        markup.add(back, home)

        description1 = data["items"]['women']['bags']["small.bags"][t]["description1"]
        description2 = data["items"]['women']['bags']["small.bags"][t]["description2"]
        description3 = data["items"]['women']['bags']["small.bags"][t]["description3"]
        description4 = data["items"]['women']['bags']["small.bags"][t]["description4"]
        description5 = data["items"]['women']['bags']["small.bags"][t]["description5"]
        old_price = data["items"]['women']['bags']["small.bags"][t]["oldprice"]
        new_price = data["items"]['women']['bags']["small.bags"][t]["newprice"]
        image_path = data["items"]['women']['bags']["small.bags"][t]["image_path"]

        if old_price == new_price:    
            bot.send_photo(call.message.chat.id, open(os.path.join(image_path), 'rb'),
                           caption=f'<b>{t}</b>\n<b>‚Ç¥{new_price}</b>\n\n{description1}\n{description2}\n{description3}\n{description4}\n{description5}',
                           reply_markup=markup,
                           parse_mode='HTML')
        else:
            bot.send_photo(call.message.chat.id, open(os.path.join(image_path), 'rb'),
                           caption=f'<b>{t}</b>\n<s><i>‚Ç¥{old_price}</i></s> <b>‚Ç¥{new_price}</b>\n\n{description1}\n{description2}\n{description3}\n{description4}\n{description5}',
                           reply_markup=markup,
                           parse_mode='HTML')
    f.close()


@bot.callback_query_handler(func=lambda call: call.data in ['bb', 'bn'])
def backpack(call):
    global current_index1

    with open('items.json', 'r', encoding='utf-8') as f:
        data = json.load(f)
        item_list = list(data['items']['women']['backpack'].keys())

        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

        if call.data == 'bb':
            current_index1 = (current_index1 - 1) % len(item_list)
        elif call.data == 'bn':
            current_index1 = (current_index1 + 1) % len(item_list)

        t = item_list[current_index1]

        markup = types.InlineKeyboardMarkup(row_width=3)
        
        back = types.InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='back_btn_women')
        home = types.InlineKeyboardButton('‚è™ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data='home_btn_women')
        back_item = types.InlineKeyboardButton('‚óÄÔ∏è', callback_data='bb')
        next_btn = types.InlineKeyboardButton('‚ñ∂Ô∏è', callback_data='bn')
        url = types.InlineKeyboardButton('üõí', url=data['items']['women']['backpack'][t]['url'])
        markup.add(back_item, url, next_btn)
        markup.add(back, home)

        description1 = data["items"]['women']["backpack"][t]["description1"]
        description2 = data["items"]['women']["backpack"][t]["description2"]
        description3 = data["items"]['women']["backpack"][t]["description3"]
        description4 = data["items"]['women']["backpack"][t]["description4"]
        description5 = data["items"]['women']["backpack"][t]["description5"]
        old_price = data["items"]['women']["backpack"][t]["oldprice"]
        new_price = data["items"]['women']["backpack"][t]["newprice"]
        image_path = data["items"]['women']["backpack"][t]["image_path"]

        if old_price == new_price:    
            bot.send_photo(call.message.chat.id, open(os.path.join(image_path), 'rb'),
                           caption=f'<b>{t}</b>\n<b>‚Ç¥{new_price}</b>\n\n{description1}\n{description2}\n{description3}\n{description4}\n{description5}',
                           reply_markup=markup,
                           parse_mode='HTML')
        else:
            bot.send_photo(call.message.chat.id, open(os.path.join(image_path), 'rb'),
                           caption=f'<b>{t}</b>\n<s><i>‚Ç¥{old_price}</i></s> <b>‚Ç¥{new_price}</b>\n\n{description1}\n{description2}\n{description3}\n{description4}\n{description5}',
                           reply_markup=markup,
                           parse_mode='HTML')
    f.close()


@bot.callback_query_handler(func=lambda call: call.data in ['awb', 'awn'])
def accessories_women(call):
    global current_index1

    with open('items.json', 'r', encoding='utf-8') as f:
        data = json.load(f)
        item_list = list(data['items']['women']['accessories_women'].keys())

        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

        if call.data == 'awb':
            current_index1 = (current_index1 - 1) % len(item_list)
        elif call.data == 'awn':
            current_index1 = (current_index1 + 1) % len(item_list)

        t = item_list[current_index1]

        markup = types.InlineKeyboardMarkup(row_width=3)
        
        back = types.InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='back_btn_women')
        home = types.InlineKeyboardButton('‚è™ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data='home_btn_women')
        back_item = types.InlineKeyboardButton('‚óÄÔ∏è', callback_data='awb')
        next_btn = types.InlineKeyboardButton('‚ñ∂Ô∏è', callback_data='awn')
        url = types.InlineKeyboardButton('üõí', url=data['items']['women']['accessories_women'][t]['url'])
        markup.add(back_item, url, next_btn)
        markup.add(back, home)

        description1 = data["items"]['women']["accessories_women"][t]["description1"]
        # description2 = data["items"]['women']["accessories_women"][t]["description2"]
        # description3 = data["items"]['women']["accessories_women"][t]["description3"]
        # description4 = data["items"]['women']["accessories_women"][t]["description4"]
        # description5 = data["items"]['women']["accessories_women"][t]["description5"]
        old_price = data["items"]['women']["accessories_women"][t]["oldprice"]
        new_price = data["items"]['women']["accessories_women"][t]["newprice"]
        image_path = data["items"]['women']["accessories_women"][t]["image_path"]

        if old_price == new_price:    
            bot.send_photo(call.message.chat.id, open(os.path.join(image_path), 'rb'),
                           caption=f'<b>{t}</b>\n{description1}\n<b>‚Ç¥{new_price}</b>',
                           reply_markup=markup,
                           parse_mode='HTML')
        else:
            bot.send_photo(call.message.chat.id, open(os.path.join(image_path), 'rb'),
                           caption=f'<b>{t}</b>\n<s><i>‚Ç¥{old_price}</i></s> <b>‚Ç¥{new_price}</b>\n{description1}',
                           reply_markup=markup,
                           parse_mode='HTML')
    f.close()


#------------------------------------------------------------------------------------------------------------------------------

# –æ–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@bot.message_handler(commands=['start', 'goods_list'])
def start(message: str) -> None:
    """
    (message: str) - —Ç–æ –∞–Ω–æ—Ç–∞—Ü—ñ—è, –≤–∫–∞–∑—É—î–º–æ —Ç–∏–ø –¥–∞–Ω–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç—É message
    (-> None) - —Ç—É—Ç –º–∏ –≤–∫–∞—É—î–º–æ, —â–æ —Ñ—É–Ω–∫—Ü—ñ—è –Ω—ñ—á–æ–≥–æ –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞—î
    """
    cht = message.chat.id

    with open('users.json', 'r', encoding='utf-8') as f:
        data = json.load(f)

    # –î–æ–¥–∞—î–º–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä, —è–∫—â–æ –≤—ñ–Ω –≤–∂–µ –Ω–µ —ñ—Å–Ω—É—î —É —Å–ø–∏—Å–∫—É
    if cht not in data["chat_ids"]:
        data["chat_ids"].append(cht)

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ —É —Ñ–∞–π–ª—ñ
    with open('users.json', 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False)

    bot.send_message(cht, '–í—ñ—Ç–∞—é! –¶–µ –º–∞–≥–∞–∑–∏–Ω –ª—è–ª—è–ª—è\n–û–±–µ—Ä–∏ –¥—ñ—é', reply_markup=start_buttons())

@bot.message_handler(commands=['answer'])
def answer(message: str) -> None:
    cht = message.chat.id

    if cht != 1001173176:
        bot.send_message(cht, '–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø–æ–≤–Ω–æ–≤–∞–∂–µ–Ω—å –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏')
    else:
        msg = bot.send_message(cht, 'id:')
        bot.register_next_step_handler(msg, answer_handler)

@bot.message_handler(commands=['help'])
def goods_list(message: str) -> None:
    cht = message.chat.id

    bot.send_message(cht, 'help', reply_markup=help())

@bot.message_handler(commands=['send_discount'])
def discount(message: str) -> None:
    cht = message.chat.id

    if cht != 1001173176:
        bot.send_message(cht, '–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø–æ–≤–Ω–æ–≤–∞–∂–µ–Ω—å –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏')
    else:
        msg = bot.send_message(cht, '–¢–æ–≤–∞—Ä:')
        bot.register_next_step_handler(msg, send_discount)

# –∑ —Ü—ñ—î—é —à—Ç—É–∫–æ—é —Å–∞–º –¥–æ –∫—ñ–Ω—Ü—è –Ω–µ —Ä–æ–∑—ñ–±—Ä–∞–≤—Å—è( –í–æ–Ω–æ —Ç—Ä–µ–±–∞ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —ñ–Ω–ª–∞–π–Ω–æ–≤–∏—Ö –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func = lambda call: True)
def callback(call):
    cht = call.message.chat.id

    # —Ç—É—Ç –º–∏ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, –Ω–∞ —è–∫—É –∫–Ω–æ–ø–∫—É —Ç–∏—Ü—å–Ω—É–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
    if call.message:
        if call.data == 'women':
            women_goods(call=call)
        if call.data == 'men':
            bot.edit_message_text(chat_id=cht, message_id=call.message.message_id, text='–í–∏ –æ–±—Ä–∞–ª–∏ —á–æ–ª–æ–≤—ñ—á—ñ —Ç–æ–≤–∞—Ä–∏', reply_markup=men_goods())
        elif call.data == 'bags':
            bot.edit_message_text(chat_id=cht, message_id=call.message.message_id, text='–°—É–º–∫–∏:', reply_markup=bags())
        elif call.data == 'big':
            big_bags(call)
        elif call.data == 'small':
            small_bags(call)
        elif call.data == 'backpacks':
            backpack(call)
        elif call.data == 'accessories_women':
            accessories_women(call)
        elif call.data == 'help':
            bot.edit_message_text(chat_id=cht, message_id=call.message.message_id, text='help', reply_markup=help())
        elif call.data == 'jacket':
            jacket_show(call)
        elif call.data == 'pants':
            pants_show(call)
        elif call.data == 'accessories_men':
            accessories_men(call)
         

        elif call.data == 'back_btn_men':
            bot.send_message(cht, '–í–∏ –æ–±—Ä–∞–ª–∏ —á–æ–ª–æ–≤—ñ—á—ñ —Ç–æ–≤–∞—Ä–∏', reply_markup=men_goods())
        elif call.data == 'home_btn_men':
            bot.send_message(cht, '–í—ñ—Ç–∞—é! –¶–µ –º–∞–≥–∞–∑–∏–Ω –ª—è–ª—è–ª—è\n–û–±–µ—Ä–∏ –¥—ñ—é', reply_markup=start_buttons())
        elif call.data == 'back_btn_women':
            bot.send_message(cht, '–°—É–º–∫–∏:', reply_markup=bags())
        elif call.data == 'home_btn_women':
            bot.send_message(cht, '–í—ñ—Ç–∞—é! –¶–µ –º–∞–≥–∞–∑–∏–Ω –ª—è–ª—è–ª—è\n–û–±–µ—Ä–∏ –¥—ñ—é', reply_markup=start_buttons())




        elif call.data == 'q1':
            bot.edit_message_text(chat_id=cht, message_id=call.message.message_id, text='–ü–µ—Ä—à–µ –ø–∏—Ç–∞–Ω–Ω—è', reply_markup=start_buttons())
        elif call.data == 'q2':
            bot.edit_message_text(chat_id=cht, message_id=call.message.message_id, text='–î—Ä—É–≥–µ –ø–∏—Ç–∞–Ω–Ω—è', reply_markup=start_buttons())
        elif call.data == 'q3':
            bot.edit_message_text(chat_id=cht, message_id=call.message.message_id, text='–¢—Ä–µ—Ç—î –ø–∏—Ç–∞–Ω–Ω—è', reply_markup=start_buttons())
        elif call.data == 'q4':
            bot.edit_message_text(chat_id=cht, message_id=call.message.message_id, text='–ß–µ—Ç–≤–µ—Ä—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è', reply_markup=start_buttons())
        elif call.data == 'help_specialist':
            global phone

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            phone = types.KeyboardButton('–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç', request_contact=True)
            markup.add(phone)
            bot.send_message(cht, '–ù–∞–¥—ñ—à–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç', reply_markup=markup)


        # –¶—ñ –±–ª–æ–∫–∏ elif –≤—ñ–¥–æ–∫—Ä–µ–º–ª–µ–Ω—ñ, –±–æ —Ç—É—Ç —Ü—ñ–ª–∞ —Å–∏—Å—Ç–µ–º–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω—å –Ω–∞–∑–∞–¥ :)
        elif call.data == 'back':
            bot.edit_message_text(chat_id=cht, message_id=call.message.message_id, text='–í—ñ—Ç–∞—é! –¶–µ –º–∞–≥–∞–∑–∏–Ω –ª—è–ª—è–ª—è\n–û–±–µ—Ä–∏ –¥—ñ—é', reply_markup=start_buttons())
        elif call.data == 'back_bags':
            women_goods(call)
        elif call.data == 'home':
            bot.edit_message_text(chat_id=cht, message_id=call.message.message_id, text='–í—ñ—Ç–∞—é! –¶–µ –º–∞–≥–∞–∑–∏–Ω –ª—è–ª—è–ª—è\n–û–±–µ—Ä–∏ –¥—ñ—é', reply_markup=start_buttons())

# –æ–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç—É
@bot.message_handler(content_types=['contact'])
def text(message):
    cht = message.chat.id
    global phone

    if message.contact:
        phone = message.contact.phone_number

        keyboard = types.ReplyKeyboardRemove()
        msg = bot.send_message(cht, '–ù–∞–¥—ñ—à–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è', reply_markup=keyboard)

        bot.register_next_step_handler(msg, q_handler)

bot.polling()